Auth is a more important part 
register FOrm -> click Register -> This will be added to the mongodb
-> login page -> id and password -> login page 
                  public         -> public page

Normal user or admin user , both needed to be have a login but redoirect is different 
1.how auth works 
2. create cookies 
3. Role based auth (Role : user / admin)
4. logined in we have to store a cookies , for auth information 
5. if the user is authenticated you have to login 

6.let userid, email and password 
7.role default user 

bcryt -> this is a package we used to encrypt and decrypt the things inside the auth

when ever the user email and password -> we will create a token (hold the user information) -> valid for some minuetes -> basic level
we have to store the token in cookie 
login the user 

login controller : - 
1. getting the field from frontent 
2. find the current user 
3. if the user desn't existe then give an error message 
4. check if the password is correct or wrong
5. creating a token and returning the token 
6. this access token will hold all the information that we are storing here like user id , user name and role 

After Loged in : 
1. if user are a normal user -> you can go to certain pages :
2. if user are a admin user -> you can go to certain pages and some special pages :

we need to user middle ware to speperate these things : role based 
middleware -> check if the user is authenticated or not -> then check the token or verify the token -> ones this is done we can get user admin section 


Next Chapter : File upload 
Lets start  the Fun and understand how is it is working 
1. multer : handle multi part and form data used for uploading file 
2. cloudinary :- upload and store our image 

Task 
user :- fetch the image 
admin :- can upload the image 

when ever we are working with some upload functionalities :- understand the properties are there for file upload schema 
work flow :- 
In Front end -> click upload an image -> select the image -> upload to cloudinary -> will return an asset id and url-> store in moongoose 



Complete flow of everything till now :-

folder and explanation :- 

Config - 
controller - for controller 
db - Connection functionality of mongoDB 
helper - in cloudinary  
middleware - auth middleware , uploadmiddleware 
model - sceham for mongoDB
router - focuse on routing functionalities 
upload - for the multer to save the image temperary 

-> server.js - this is the root folder that we enable to listen to server 
   we are using Nodemon for refreshing the server each time when we update things 

Auth 

for authentication , for every application there will be login and register functionality
so user needed to type username, email and password 
login to the specific id there will be a token for login that we will store in cookies 
using jwt accesss token 

first we have to create an auth route which will be for login and register 

auth-router -> 1.resgister user and 2. login user (POST request)
from frontend if there is any requrest regarding the POST the server will give respoonse 

there will be controller for each request here we have register User and login user controller 

Register User Controller :- 
1. First extract the req.boyd where we will get username,email,password and role 
2. checkExistingUser (which will avoid createing any account of same name )
3.hash the password with bcrypt function(it is a liberary)
4. then we have to save it in mongodb for that we have to create a schema or model 
5. before that we have to make sure the monogo db is connected or not 
6. pass the values to the schema and save the values in mongoos 


Login user controller :- 
1. collect the username and password from the request body 
2. find the user  and if the user is not exisiting then return false
3. compare the password with bcrypt function 
4. if the password matchs then store it in cookies 
5. using jwt we are createing a token accesstoken with a secrete key which expires in 35 minutes 


After this we have to develope a middleware tha will look after the authentication is properly done or not 
1. from header collect the authorization
2.token is collected 
3. verify the token using the private key 
4. this will pass the decodedtokeinfo 
5. save it in req.userInfo

Home route :- we will check only if the user is loged in or not ,
admin_route:- we have to check the role of the fetched or decoded access token user is admin or not 
              for that we have a proper middleware  

using multer we will store the file temperary in the server in uploads folder  and change the file name to 
and filter the file with name starts with image else  return error 
export that to the multer 

now we have to store the image into cludinary and then 

helper function = uploadToCloudinary which will help in upload and then return url and public_id result 

uploadImageController 
1.check the req.file is present or not  it is comming from multer 
2. this will pass the file path from the multer which will pass to the uploadtocloudinary helper function which will return the URL 
3. pass this url, public_id and uploadedBy from the auth middleware user id and save it in the mongodb 


Here is your refined and professional version of the documentation without altering the core logic or meaning:

---

### Change Password Functionality

**Overview:**
This is an authentication-related feature and is handled under the `auth-route` routing group.

**Route:**
`POST /passchange`
This route facilitates the password change functionality for authenticated users.

**Middleware:**

* **Authentication Middleware (`authMiddleware`)**: Ensures that the user is authenticated before allowing access to the password change endpoint.

**Controller Function: `changePassword`**

**Workflow:**

1. The `userId` is retrieved from the authentication middleware and attached to the request object.
2. Extract `oldPassword` and `newPassword` from `req.body`.

   * If either value is missing, return an appropriate error response.
3. Query the database to find the user using the provided `userId`.

   * If the user does not exist, return an error response.
4. Verify whether the provided `oldPassword` matches the current password stored in the database.

   * If the password is incorrect, return an authentication error.
5. If the old password is valid:

   * Hash the `newPassword` securely using a hashing function (e.g., bcrypt).
   * Update the user's password in the MongoDB database with the newly hashed password.
6. Return a success response indicating that the password has been updated successfully.

---

Let me know if you'd like this formatted for README, Swagger, or internal code documentation.

     